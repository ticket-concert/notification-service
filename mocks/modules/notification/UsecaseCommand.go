// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "notification-service/internal/modules/notification/models/request"
)

// UsecaseCommand is an autogenerated mock type for the UsecaseCommand type
type UsecaseCommand struct {
	mock.Mock
}

// SendEmailOtpRegister provides a mock function with given fields: origCtx, payload
func (_m *UsecaseCommand) SendEmailOtpRegister(origCtx context.Context, payload request.SendEmailRegister) error {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailOtpRegister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.SendEmailRegister) error); ok {
		r0 = rf(origCtx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailTicket provides a mock function with given fields: origCtx, orderId
func (_m *UsecaseCommand) SendEmailTicket(origCtx context.Context, orderId string) error {
	ret := _m.Called(origCtx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailTicket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(origCtx, orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecaseCommand creates a new instance of UsecaseCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseCommand {
	mock := &UsecaseCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
